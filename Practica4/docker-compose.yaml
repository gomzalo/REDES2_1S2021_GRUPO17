version: "2.4"
services:

  db:
    # build: ../Database/mysql
    build: ./Server/db/mysql
    # image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    # environment: 
    #   - MYSQL_ROOT_PASSWORD=123  
    # env_file: 
    #   - .env
    volumes: 
      - my-datavolume:/var/lib/mysql
    ports:
      - "3306"
    networks:
      - red-db
  #se crea un servicio con un contenedor el cual utiliza la imagen api-servidor1
  #esta api despliega un mensaje simple, al visitar el endpoint
  # http://localhost:5000/mensaje
  server1:
    # image: gomzalo/r2-server-p4:latest
    build: ./Server
    ports:
     - "5002:6001"
    #se conecta el contenedor a la red "red-servidores"
    depends_on:
     - db
    environment:
    - USER_NAME=users_service
    - PORT=3306
    - HOST=db
    - DB_NAME=test
    - PASS=123
    - ID_SERVIDOR=200413657
    networks:
      - red-servidores
      - red-db
  #se crea un segundo servicio con un contenedor el cual utiliza la imagen api-servidor2
  #esta api despliega un mensaje simple, al visitar el endpoint
  # http://localhost:5001/mensaje
  server2:
    # image: gomzalo/r2-server-p4:latest
    build: ./Server
    ports:
     - "5001:6000"
    #se conecta el contenedor a la red "red-servidores"
    depends_on:
     - db
    environment:
    - USER_NAME=users_service
    - PORT=3306
    - HOST=db
    - DB_NAME=test
    - PASS=123
    - ID_SERVIDOR=201503584
    networks:
      - red-servidores
      - red-db

  server3:
    # image: gomzalo/r2-server-p4:latest
    build: ./Server
    ports:
     - "5003:6002"
    #se conecta el contenedor a la red "red-servidores"
    depends_on:
     - db
    environment:
    - USER_NAME=users_service
    - PORT=3306
    - HOST=db
    - DB_NAME=test
    - PASS=123
    - ID_SERVIDOR=201318652
    networks:
      - red-servidores
      - red-db

  nginx:
    image: nginx:latest
    volumes:
      - ./Server/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - server1
      # - server2
      # - server3
    ports:
      - "4000:4000"
    networks:
      - red-servidores
      # - red-client
  
  client:
    build: ./Client
    ports:
      - "8080:8080"
    networks: 
      - red-client

#aqui se crean las networks
networks:
  #se crea la red "red-servidores" usando el driver de tipo "bridge"
  red-servidores:
    driver: bridge

  red-db:
      driver: bridge
  
  red-client:
      driver: bridge
volumes:
  my-datavolume: